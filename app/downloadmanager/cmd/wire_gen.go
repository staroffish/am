// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/staroffish/am/app/downloadmanager/internal/biz"
	"github.com/staroffish/am/app/downloadmanager/internal/conf"
	"github.com/staroffish/am/app/downloadmanager/internal/data"
	"github.com/staroffish/am/app/downloadmanager/internal/server"
	"github.com/staroffish/am/app/downloadmanager/internal/service"
	"go.etcd.io/etcd/client/v3"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(downloadManagerServerConfig *conf.DownloadManagerServerConfig, confData *conf.Data, client *clientv3.Client, logger log.Logger, registrar registry.Registrar, taskEtcdPrefix data.TaskEtcdPrefix) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(downloadManagerServerConfig, client, logger)
	if err != nil {
		return nil, nil, err
	}
	downloadTask := data.NewDownloadTask(dataData, taskEtcdPrefix, logger)
	downloadManagerRepo := data.NewDownloadManagerRepo(dataData, downloadManagerServerConfig, downloadTask, logger)
	downloadManager := biz.NewDownloadManager(downloadManagerRepo, logger)
	downloadmanagerService := service.NewDownloadmanagerService(downloadManager, logger)
	httpServer := server.NewHTTPServer(downloadManagerServerConfig, downloadmanagerService, logger)
	grpcServer := server.NewGRPCServer(downloadManagerServerConfig, downloadmanagerService, logger)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
