// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/staroffish/am/app/am-spider/internal/biz"
	"github.com/staroffish/am/app/am-spider/internal/biz/amspider"
	"github.com/staroffish/am/app/am-spider/internal/conf"
	"github.com/staroffish/am/app/am-spider/internal/data"
	"github.com/staroffish/am/app/am-spider/internal/server"
	"github.com/staroffish/am/app/am-spider/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, spiderConfig *conf.SpiderConfig, logger log.Logger, registrar registry.Registrar) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	animeSpiderRepo := data.NewAmSpiderRepo(spiderConfig, dataData, confData, logger)
	spiderInterface := amspider.NewSpider(spiderConfig, logger)
	amSpider := biz.NewAmSpider(animeSpiderRepo, spiderInterface, logger)
	amspiderService := service.NewAmspiderService(amSpider, logger)
	httpServer := server.NewHTTPServer(confServer, amspiderService, logger)
	grpcServer := server.NewGRPCServer(confServer, amspiderService, logger)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
