// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	common "github.com/staroffish/am/api/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type DownloaderHTTPServer interface {
	Add(context.Context, *AddRequest) (*common.Empty, error)
	Delete(context.Context, *DeleteRequest) (*common.Empty, error)
	List(context.Context, *common.Empty) (*ListResponse, error)
	Pause(context.Context, *PauseRequest) (*common.Empty, error)
	Resume(context.Context, *ResumeRequest) (*common.Empty, error)
}

func RegisterDownloaderHTTPServer(s *http.Server, srv DownloaderHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/downloader/task/add", _Downloader_Add0_HTTP_Handler(srv))
	r.DELETE("/v1/downloader/task/delete/{id}", _Downloader_Delete0_HTTP_Handler(srv))
	r.GET("/v1/downloader/task", _Downloader_List0_HTTP_Handler(srv))
	r.POST("/v1/downloader/task/pause/{id}", _Downloader_Pause0_HTTP_Handler(srv))
	r.POST("/v1/downloader/task/resume/{id}", _Downloader_Resume0_HTTP_Handler(srv))
}

func _Downloader_Add0_HTTP_Handler(srv DownloaderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.downloader.v1.Downloader/Add")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Empty)
		return ctx.Result(200, reply)
	}
}

func _Downloader_Delete0_HTTP_Handler(srv DownloaderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.downloader.v1.Downloader/Delete")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Delete(ctx, req.(*DeleteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Empty)
		return ctx.Result(200, reply)
	}
}

func _Downloader_List0_HTTP_Handler(srv DownloaderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in common.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.downloader.v1.Downloader/List")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*common.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResponse)
		return ctx.Result(200, reply)
	}
}

func _Downloader_Pause0_HTTP_Handler(srv DownloaderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PauseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.downloader.v1.Downloader/Pause")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Pause(ctx, req.(*PauseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Empty)
		return ctx.Result(200, reply)
	}
}

func _Downloader_Resume0_HTTP_Handler(srv DownloaderHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResumeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.downloader.v1.Downloader/Resume")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Resume(ctx, req.(*ResumeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*common.Empty)
		return ctx.Result(200, reply)
	}
}

type DownloaderHTTPClient interface {
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *common.Empty, err error)
	Delete(ctx context.Context, req *DeleteRequest, opts ...http.CallOption) (rsp *common.Empty, err error)
	List(ctx context.Context, req *common.Empty, opts ...http.CallOption) (rsp *ListResponse, err error)
	Pause(ctx context.Context, req *PauseRequest, opts ...http.CallOption) (rsp *common.Empty, err error)
	Resume(ctx context.Context, req *ResumeRequest, opts ...http.CallOption) (rsp *common.Empty, err error)
}

type DownloaderHTTPClientImpl struct {
	cc *http.Client
}

func NewDownloaderHTTPClient(client *http.Client) DownloaderHTTPClient {
	return &DownloaderHTTPClientImpl{client}
}

func (c *DownloaderHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*common.Empty, error) {
	var out common.Empty
	pattern := "/v1/downloader/task/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.downloader.v1.Downloader/Add"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DownloaderHTTPClientImpl) Delete(ctx context.Context, in *DeleteRequest, opts ...http.CallOption) (*common.Empty, error) {
	var out common.Empty
	pattern := "/v1/downloader/task/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.downloader.v1.Downloader/Delete"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DownloaderHTTPClientImpl) List(ctx context.Context, in *common.Empty, opts ...http.CallOption) (*ListResponse, error) {
	var out ListResponse
	pattern := "/v1/downloader/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.downloader.v1.Downloader/List"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DownloaderHTTPClientImpl) Pause(ctx context.Context, in *PauseRequest, opts ...http.CallOption) (*common.Empty, error) {
	var out common.Empty
	pattern := "/v1/downloader/task/pause/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.downloader.v1.Downloader/Pause"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DownloaderHTTPClientImpl) Resume(ctx context.Context, in *ResumeRequest, opts ...http.CallOption) (*common.Empty, error) {
	var out common.Empty
	pattern := "/v1/downloader/task/resume/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.downloader.v1.Downloader/Resume"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
