// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/amspider/v1/amspider.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AmspiderClient is the client API for Amspider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AmspiderClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type amspiderClient struct {
	cc grpc.ClientConnInterface
}

func NewAmspiderClient(cc grpc.ClientConnInterface) AmspiderClient {
	return &amspiderClient{cc}
}

func (c *amspiderClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := c.cc.Invoke(ctx, "/api.amspider.v1.Amspider/Crawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AmspiderServer is the server API for Amspider service.
// All implementations must embed UnimplementedAmspiderServer
// for forward compatibility
type AmspiderServer interface {
	Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
	mustEmbedUnimplementedAmspiderServer()
}

// UnimplementedAmspiderServer must be embedded to have forward compatible implementations.
type UnimplementedAmspiderServer struct {
}

func (UnimplementedAmspiderServer) Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}
func (UnimplementedAmspiderServer) mustEmbedUnimplementedAmspiderServer() {}

// UnsafeAmspiderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AmspiderServer will
// result in compilation errors.
type UnsafeAmspiderServer interface {
	mustEmbedUnimplementedAmspiderServer()
}

func RegisterAmspiderServer(s grpc.ServiceRegistrar, srv AmspiderServer) {
	s.RegisterService(&Amspider_ServiceDesc, srv)
}

func _Amspider_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AmspiderServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.amspider.v1.Amspider/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AmspiderServer).Crawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Amspider_ServiceDesc is the grpc.ServiceDesc for Amspider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Amspider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.amspider.v1.Amspider",
	HandlerType: (*AmspiderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Amspider_Crawl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/amspider/v1/amspider.proto",
}
